{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Wine Cellar","text":"<p>Wine Cellar is a self-hosted wine management app built with Django, designed for wine enthusiasts to track wines, store tasting notes, rate wines, and manage inventory. Whether you're a casual drinker or a connoisseur, this app helps organize your collection.</p> <p> </p>"},{"location":"#features","title":"Features","text":"<ul> <li>Wine Tracking: Record and review wines you've tasted.</li> <li>Inventory Management: Monitor bottle stock levels.</li> <li>Multi-User Support: Host for yourself and your friends.</li> <li>Barcode Scanning: Easy adding and removing known wines by scanning their barcode.</li> <li>Tasting Notes: Save aroma, flavor, and experience details.</li> <li>Wine Ratings: Rate wines to track preferences.</li> <li>Food Pairings: Add recommended food pairings.</li> <li>Self-hosted: Full control over your data.</li> <li>Drink By Reminder: Email reminder to drink a bottle before it goes off.</li> </ul>"},{"location":"#code-contributing","title":"Code &amp; Contributing","text":"<p>You can find the source code for Wine Cellar on  GitHub.</p> <ul> <li>Report Issues: If you encounter any bugs or have suggestions for improvements, feel free to open an issue.</li> <li>Feature Requests: If you have an idea for a new feature, submit a feature request.</li> <li>Chat &amp; Discussion: Join the conversation, ask questions, or chat about wine management at discussions.</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the AGPL-3.0 License.</p>"},{"location":"deployment/","title":"Deployment","text":"<p>The easiest way to run Wine Cellar is by using docker as described below.</p>"},{"location":"deployment/#docker-deployment","title":"Docker Deployment","text":""},{"location":"deployment/#development-demo-mode","title":"Development / Demo Mode","text":"<p>Note</p> <p>Not for production use.</p>"},{"location":"deployment/#steps","title":"Steps:","text":"<ol> <li>Copy the development environment configuration:    <pre><code>cp .env.dev-sample .env.dev\n</code></pre></li> <li>Build the Docker image:    <pre><code>docker build -t wine-cellar-dev .\n</code></pre></li> <li>Start the application:    <pre><code>docker compose up\n</code></pre></li> </ol>"},{"location":"deployment/#production-setup","title":"Production Setup","text":"<p>Note</p> <p>This setup is under development. Proceed with caution.</p> <p>Note</p> <p>When using podman instead of docker you might have to add <code>:z</code> to the volumes to allow sharing them between containers and make SELinux happy.</p>"},{"location":"deployment/#option-1-using-a-reverse-proxy","title":"Option 1: Using a Reverse Proxy","text":"<p>Prerequisites:</p> <ul> <li>A configured reverse proxy.</li> <li>Properly set <code>.env</code> files.</li> </ul>"},{"location":"deployment/#steps_1","title":"Steps:","text":"<ol> <li>Copy and configure environment files:    <pre><code>cp .env.prod.db-sample .env.prod.db\ncp .env.prod-sample .env.prod\n</code></pre></li> <li>Edit <code>.env</code> files with secure credentials.</li> <li>Start the production container:    <pre><code>docker compose -f docker-compose.prod.yml up\n</code></pre></li> <li>Configure your reverse proxy to forward traffic to <code>http://127.0.0.1:8085</code>.</li> </ol>"},{"location":"deployment/#email-setup","title":"Email Setup","text":"<p>Wine Cellar can send notification emails, including reminders for when a wine should be drunk by (\"drink by\" reminders).</p> <p>To enable email notifications, configure the email backend and credentials in your <code>.env-prod</code> file:</p> <pre><code>DJANGO_EMAIL_HOST=smtp.example.com\nDJANGO_EMAIL_PORT=587\nDJANGO_EMAIL_HOST_USER=your@email.com\nDJANGO_EMAIL_HOST_PASSWORD=yourpassword\nDJANGO_EMAIL_USE_TLS=\nDJANGO_EMAIL_USE_SSL=\nDJANGO_DEFAULT_FROM_EMAIL=Wine Cellar &lt;your@email.com&gt;\n</code></pre> <p>Note</p> <p>USE_TLS and USE_SSL are mutual exclusive, only one can be True</p>"},{"location":"setup/","title":"Installation &amp; Setup","text":""},{"location":"setup/#prerequisites","title":"Prerequisites","text":"<p>Ensure your system has:</p> <ul> <li>Python 3.x</li> <li>Node.js (v14.x or higher recommended)</li> <li>npm (comes with Node.js)</li> </ul>"},{"location":"setup/#getting-started","title":"Getting Started","text":""},{"location":"setup/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/the-broke-sommeliers/wine-cellar.git\ncd wine-cellar\n</code></pre>"},{"location":"setup/#2-install-dependencies","title":"2. Install Dependencies","text":"<pre><code>make install\n</code></pre>"},{"location":"setup/#3-run-the-development-server","title":"3. Run the Development Server","text":"<pre><code>make server\n</code></pre> <p>Access the app at <code>http://127.0.0.1:8003/</code>.</p>"},{"location":"setup/#4-watch-for-changes","title":"4. Watch for Changes","text":"<pre><code>make watch\n</code></pre>"},{"location":"setup/#5-create-an-admin-user","title":"5. Create an Admin User","text":"<pre><code>source venv/bin/activate\npython manage.py createsuperuser\n</code></pre>"},{"location":"setup/#6-load-sample-data-optional","title":"6. Load Sample Data (Optional)","text":"<pre><code>make fixtures\n</code></pre>"},{"location":"storage/","title":"Storage","text":""},{"location":"storage/#overview","title":"Overview","text":"<p>The Storage system represents how bottles are organized physically \u2014 on racks, shelves, or in bins. There are two main types of storage in the Wine Cellar app:</p> <ol> <li>Unstructured (Unlimited Shelf) </li> <li>Structured (Grid Shelf with Rows &amp; Columns)</li> </ol>"},{"location":"storage/#shelf-concepts","title":"Shelf Concepts","text":"<p>A Shelf (or rack) is a container for bottles. It may be either:</p> <ul> <li>Unstructured \u2014 a freeform space with no limits on capacity  </li> <li>Structured \u2014 a grid with fixed rows and columns</li> </ul>"},{"location":"storage/#core-entities","title":"Core Entities","text":"Entity Description Shelf / Rack Container for bottles Mode <code>unstructured</code> or <code>grid</code> Rows / Columns Grid dimensions (if structured) Slot / Cell Individual position in a grid shelf Bottle A stored instance of a wine in a given location"},{"location":"storage/#1-unstructured-unlimited-shelf","title":"1. Unstructured / Unlimited Shelf","text":"<p>Unstructured shelves act like bins, crates or a fridge \u2014 you can add as many bottles as you like without worrying about coordinates.</p>"},{"location":"storage/#characteristics","title":"Characteristics","text":"<ul> <li>No defined rows or columns </li> <li>Effectively unlimited capacity </li> <li>Perfect for bulk or casual storage  </li> </ul>"},{"location":"storage/#example-bulk-shelf","title":"Example: \u201cBulk Shelf\u201d","text":"<p>Shelf A (mode: <code>unstructured</code>)</p> Wine Row Column Ch\u00e2teau Margaux 2015 Penfolds Grange 2014"},{"location":"storage/#2-structured-grid-shelf-rows-columns","title":"2. Structured / Grid Shelf (Rows \u00d7 Columns)","text":"<p>Structured shelves define a clear grid \u2014 each bottle sits in a specific slot (row and column). This is perfect for users who want to know exactly where each bottle is stored.</p>"},{"location":"storage/#characteristics_1","title":"Characteristics","text":"<ul> <li>Fixed number of rows and columns </li> <li>Each slot holds exactly one bottle  </li> <li>Prevents overfilling or duplicates  </li> <li>Makes locating a bottle easy</li> </ul>"},{"location":"storage/#example-main-rack","title":"Example: \u201cMain Rack\u201d","text":"<p>Kitchen Rack (mode: <code>structured</code>, 4 rows \u00d7 5 columns)</p> Wine Row Column Ch\u00e2teau Margaux 2015 1 1 Ch\u00e2teau Margaux 2015 1 2 Dom P\u00e9rignon 2012 1 3 Penfolds Grange 2014 2 1"},{"location":"testing/","title":"Running Tests","text":""},{"location":"testing/#running-the-test-suite","title":"Running the Test Suite","text":"<p>To execute all tests (backend and frontend), use:</p> <pre><code>make test\n</code></pre>"},{"location":"testing/#running-backend-tests","title":"Running Backend Tests","text":"<p>For Django tests, run:</p> <pre><code>python manage.py test\n</code></pre>"},{"location":"testing/#running-frontend-tests","title":"Running Frontend Tests","text":"<p>To run JavaScript-based frontend tests, use:</p> <pre><code>npm test\n</code></pre>"},{"location":"wine/","title":"Wine","text":""},{"location":"wine/#overview","title":"Overview","text":"<p>A Wine represents a unique wine type or label \u2014 identified by key attributes like grapes, vintage, vinyard. Wines are templates for real bottles, which reference them when stored in the cellar.</p>"},{"location":"wine/#wine-vs-bottle","title":"Wine vs Bottle","text":"<p>It\u2019s important to distinguish between a Wine and a Bottle:</p> Concept Description Wine Metadata about a particular label or type of wine Bottle A specific instance of a wine in your cellar inventory <p>A single Wine record may have many bottles stored across different shelves or racks.</p>"},{"location":"wine/#example","title":"Example","text":"<p>You might have:</p> <ul> <li><code>Wine</code>: Ch\u00e2teau Margaux 2015  </li> <li>12 <code>Bottle</code> entries linked to it, each with a defined storage location.</li> </ul> <p>This separation allows you to:</p> <ul> <li>Keep clean records of your cellar contents  </li> <li>Manage bottles individually  </li> <li>Track vintages, tasting notes, and inventory history</li> </ul>"},{"location":"wine/#related-topics","title":"Related Topics","text":"<ul> <li>Storage: How and where bottles are organized in your cellar</li> </ul>"}]}